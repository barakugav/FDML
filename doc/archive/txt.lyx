#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Algorithmic Robotics And Motion Planning Project
\end_layout

\begin_layout Standard
Barak Ugav 318336229
\end_layout

\begin_layout Subsubsection*
The Question
\end_layout

\begin_layout Standard
We are given a point robot 
\begin_inset Formula $P$
\end_inset

 which is known to be in the interior of some polygonal room 
\begin_inset Formula $Q$
\end_inset

 with 
\begin_inset Formula $n$
\end_inset

 vertices.
 The robot is equipped with a depth sensor which evaluates the distance
 to the visible obstacle in the pointed direction.
 Describe a data structure that can be constructed during preprocessing
 of the room and can be used to efficiently calculate all the points the
 robot might think he is after a single depth measurement from an unknown
 position and rotation.
\end_layout

\begin_layout Subsubsection*
Motivation
\end_layout

\begin_layout Standard
Such scenario can be applicable in real world cases, for example: a rover
 lands on Mars, a map of whose terrain is available to it.
 It looks about its position, and then infers its exact position on the
 Martian surface.
 Another application comes from robots that follow a planned path through
 a scene: the control systems that guide such a robot along the planned
 path gradually accumulate errors due to mechanical drift.
 Thus it is desirable to use localization from time to time to verify the
 actual position of the robot in the map, and apply corrections as necessary
 to return it to the planned path.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Solution
\end_layout

\begin_layout Standard
To answer a query of the described type, we will perform preprocessing of
 the room, and calculate for each edge the 
\begin_inset Quotes eld
\end_inset

visible
\begin_inset Quotes erd
\end_inset

 region from it, and when given a query of measurement 
\begin_inset Formula $d$
\end_inset

 we will search all the edges that have a region at distance 
\begin_inset Formula $d$
\end_inset

 from it.
 For each edge 
\begin_inset Formula $e$
\end_inset

, we will set it's 2D coordination system with its origin at the first vertex
 of the edge when traversing on the room's borders clockwise, the 
\begin_inset Formula $x$
\end_inset

 axis along the edge and the 
\begin_inset Formula $y$
\end_inset

 axis perpendicular to the edge.
 For a fixed angle 
\begin_inset Formula $\theta$
\end_inset

, we would like to calculate the distance to the nearest obstacle visible
 from the edge in angle 
\begin_inset Formula $\theta$
\end_inset

 as a function of the distance 
\begin_inset Formula $x$
\end_inset

 from the edge origin.
\end_layout

\begin_layout Standard
Given a fixed angle 
\begin_inset Formula $\theta$
\end_inset

, fixed point 
\begin_inset Formula $x_{0}$
\end_inset

 along an edge 
\begin_inset Formula $e$
\end_inset

, the line that goes through 
\begin_inset Formula $(x_{0},0)$
\end_inset

 with angle 
\begin_inset Formula $\theta$
\end_inset

 is 
\begin_inset Formula $y=tan\theta(x-x_{0})$
\end_inset

.
 Given an edge 
\begin_inset Formula $e'$
\end_inset

 with equation 
\begin_inset Formula $y=mx+b$
\end_inset

 relative to 
\begin_inset Formula $e$
\end_inset

 origins, the two lines intersection point is 
\begin_inset Formula $\left(\frac{tan\theta x_{0}+b}{tan\theta-m},\frac{tan\theta(mx_{0}+b)}{tan\theta-m}\right)$
\end_inset

, and the distance to the intersection can be calculated as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\sqrt{\left(\frac{tan\theta(mx_{0}+b)}{tan\theta-m}\right)^{2}+\left(\frac{tan\theta x_{0}+b}{tan\theta-m}-x_{0}\right)^{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
=\sqrt{\frac{tan^{2}\theta(mx_{0}+b)^{2}+(mx_{0}+b)^{2}}{\left(tan\theta-m\right)^{2}}}=\sqrt{\frac{(mx_{0}+b)^{2}(tan^{2}\theta+1)}{\left(tan\theta-m\right)^{2}}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
=\sqrt{\frac{(mx_{0}+b)^{2}sec^{2}\theta}{\left(tan\theta-m\right)^{2}}}=\frac{(mx_{0}+b)sec\theta}{tan\theta-m}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename img_discrete_angles/figure4.png
	scale 40

\end_inset


\end_layout

\begin_layout Standard
So we can write the visible distance of 
\begin_inset Formula $e'$
\end_inset

 from 
\begin_inset Formula $e$
\end_inset

 as a function of 
\begin_inset Formula $\theta,x_{0}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f_{e,e'}(\theta,x)=\frac{(mx+b)sec\theta}{tan\theta-m}
\]

\end_inset


\end_layout

\begin_layout Standard
This is of course only defined if the intersection point is in 
\begin_inset Formula $e'$
\end_inset

 range and it's in the correct half plane of 
\begin_inset Formula $e$
\end_inset

.
 Note that 
\begin_inset Formula $f_{e,e'}(\theta,x)$
\end_inset

 is a straight line if 
\begin_inset Formula $\theta$
\end_inset

 is a fixed angle.
\end_layout

\begin_layout Standard
Denote 
\begin_inset Formula $f_{e}(\theta,x)=\underset{e'}{min}\,f_{e,e'}(\theta,x)$
\end_inset

.
 For non fixed 
\begin_inset Formula $\theta$
\end_inset

, the function 
\begin_inset Formula $f_{e}(\theta,x)$
\end_inset

 represents the maximum visible distance seen at 
\begin_inset Formula $x$
\end_inset

 on 
\begin_inset Formula $e$
\end_inset

 at angle 
\begin_inset Formula $\theta$
\end_inset

.
\end_layout

\begin_layout Subsection*
Discrete Angles Approach
\end_layout

\begin_layout Standard
For our preprocessing, we will discretize the angle 
\begin_inset Formula $\theta$
\end_inset

, by dividing it to 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $q$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
 (for example 
\begin_inset Formula $1000$
\end_inset

) small angles.
 For each fixed angle 
\begin_inset Formula $\theta$
\end_inset

, will calculate for each edge 
\begin_inset Formula $e$
\end_inset

 the function 
\begin_inset Formula $f_{e}(\theta,x)$
\end_inset

.
 For a fixed angle and edge, the visible edges can be changed at most 
\begin_inset Formula $O(n)$
\end_inset

 times, because it can be changed only when a vertex is seen, and no more
 than 
\begin_inset Formula $n$
\end_inset

 vertices can be seen, so 
\begin_inset Formula $f_{e}(\theta,x)$
\end_inset

 is composed from 
\begin_inset Formula $O(n)$
\end_inset

 intervals of 
\begin_inset Formula $f_{e,e'}$
\end_inset

 (of some 
\begin_inset Formula $e'$
\end_inset

).
 There are two options in which we can define 
\begin_inset Formula $\theta$
\end_inset

:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\text{Relative angle:}$
\end_inset

 
\begin_inset Formula $\theta$
\end_inset

 will be defined exactly as described in the calculations above - the angle
 between the measurement line and the measured edge.
 This can be used if somehow we know the angle of our measurement and the
 measured edge.
 Will be used in 
\begin_inset Quotes eld
\end_inset

Second Measurement Variant - same edge
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\text{Absolute angle:}$
\end_inset

 
\begin_inset Formula $\theta$
\end_inset

 will be defined as the angle between the measurement line and the 
\begin_inset Formula $x$
\end_inset

 axis of the room.
 Note that for a fixed 
\begin_inset Formula $\theta$
\end_inset

 defined like this, the 
\series bold
total
\series default
 complexity of all 
\begin_inset Formula $\forall e,f_{e}(\theta,x)$
\end_inset

 is 
\begin_inset Formula $O(n)$
\end_inset

, which is a stronger claim than the above one on a single function 
\begin_inset Formula $f_{e}(\theta,x)$
\end_inset

.
\end_layout

\begin_layout Standard
We will alternate between these two approaches in different variants.
 In the current setting, we will prefer to use an 
\series bold
absolute
\series default
 angle, this way the total complexity of all 
\begin_inset Formula $f_{e}$
\end_inset

 for a fixed angle is 
\begin_inset Formula $O(n)$
\end_inset

.
 For each absolute angle 
\begin_inset Formula $\theta$
\end_inset

 we can calculate all intervals of all edges in 
\begin_inset Formula $O(nlogn)$
\end_inset

 time by a plane sweep.
 Therefore the preprocessing of all angles requires 
\begin_inset Formula $O(qnlogn)$
\end_inset

 time and 
\begin_inset Formula $O(qn)$
\end_inset

 space.
\end_layout

\begin_layout Standard
Given a query with distance 
\begin_inset Formula $d$
\end_inset

, we check for each edge 
\begin_inset Formula $e$
\end_inset

, and each discretized angle 
\begin_inset Formula $\theta$
\end_inset

, all the intervals at which 
\begin_inset Formula $f_{e}$
\end_inset

 is greater than 
\begin_inset Formula $d$
\end_inset

, which we can calculate in time proportional to the number of intervals.
 The result for the query is a set of all the intervals of all angles and
 all edges that match the query.
 Therefore the total time complexity for a query is 
\begin_inset Formula $O(qn)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
Output Sensitive Optimizations
\end_layout

\begin_layout Standard
The function 
\begin_inset Formula $f_{e}(\theta,x)$
\end_inset

 is composed of straight lines, denote the 
\begin_inset Formula $x$
\end_inset

 intervals of these lines by 
\begin_inset Formula $I_{i}^{e}$
\end_inset

.
 Denote 
\begin_inset Formula $max_{\theta}(I_{i}^{e})=\underset{x\in I_{i}^{e}}{max}\,f_{e}(\theta,x)$
\end_inset

.
 For a fixed edge 
\begin_inset Formula $e$
\end_inset

, we know if 
\begin_inset Formula $d>max_{\theta}(I_{i}^{e})$
\end_inset

, there is no points in the room that the robot can be in to measure 
\begin_inset Formula $d$
\end_inset

 at 
\begin_inset Formula $e$
\end_inset

 at the 
\begin_inset Formula $x$
\end_inset

 interval 
\begin_inset Formula $I_{i}^{e}$
\end_inset

.
 We can use this to get a more sensitive output algorithm.
 After the above preprocessing, for each fixed angle 
\begin_inset Formula $\theta$
\end_inset

 and a fixed edge 
\begin_inset Formula $e$
\end_inset

 we calculate for each interval the value 
\begin_inset Formula $max_{\theta}(I_{i}^{e})$
\end_inset

.
 We take the total collection of all intervals of all angles and all edges
 sort them by 
\begin_inset Formula $max_{\theta}(I_{i}^{e})$
\end_inset

.
 The preprocessing requires 
\begin_inset Formula $O(qnlogqn)$
\end_inset

 time and 
\begin_inset Formula $O(qn)$
\end_inset

 space.
\end_layout

\begin_layout Standard
Given a query with distance 
\begin_inset Formula $d$
\end_inset

, we only look at the angles and intervals at which we know there will be
 a valid answer.
 Denote by 
\begin_inset Formula $L$
\end_inset

 the number of different intervals of positions the robot can be relative
 to any edge in any of the discrete angles.
 The time complexity of the query is 
\begin_inset Formula $O(logq+logn+L)$
\end_inset

.
 In the worst case 
\begin_inset Formula $L$
\end_inset

 can be 
\begin_inset Formula $O(qn)$
\end_inset

.
\end_layout

\begin_layout Standard
In this setting, where we use discrete angles, and therefore the output
 of any such algorithm will consist of a set of lines, 
\begin_inset Formula $L$
\end_inset

 is actually proportional to the optimal solution length.
 We will assume from now on a fixed angle 
\begin_inset Formula $\theta$
\end_inset

, as we compare our algorithm to an optimal one which also outputs lines
 of fixed angles, and if their output is proportional for a fixed angle,
 it is also proportional for all the angles.
 Each interval of our algorithm must be included in the optimal algorithm
 output, but the optimal algorithm may 
\begin_inset Quotes eld
\end_inset

union
\begin_inset Quotes erd
\end_inset

 some of our lines into one continuous one if possible to reduce the output
 size.
 If a partial interval was outputted from our algorithm (left figure), meaning
 part of the line the interval represents is not valid, the optimal algorithm
 must also output only a part of it, and we can 
\begin_inset Quotes eld
\end_inset

associate
\begin_inset Quotes erd
\end_inset

 our interval with the output algorithm endpoint of the line (the endpoint
 which is included in our interval, 
\begin_inset Formula $c_{1}$
\end_inset

).
 If a full interval was outputted from our algorithm (right figure), we
 
\begin_inset Quotes eld
\end_inset

associate
\begin_inset Quotes erd
\end_inset

 it with the endpoint of the line in the opposite angle of the edge of the
 vertex that caused our interval to terminate (
\begin_inset Formula $c_{2}$
\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename img_discrete_angles/figure6.png
	scale 35

\end_inset


\end_layout

\begin_layout Standard
Therefore, for a fixed angle, we can associate each of our algorithm output
 intervals to one of the optimal algorithm output vertices, and no more
 than two intervals are associated with each vertex, and if we look at all
 the angles together, 
\begin_inset Formula $L$
\end_inset

 is proportional to an optimal output length.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
Second Measurement Variant - same edge 
\end_layout

\begin_layout Standard
If we are given the ability to measure a second distance measurement, after
 the first measurement of 
\begin_inset Formula $d_{1}$
\end_inset

 we can turn the robot a small angle 
\begin_inset Formula $\epsilon$
\end_inset

 without changing its position and measure a second time a distance 
\begin_inset Formula $d_{2}$
\end_inset

.
 If we assume the turn we did is small enough, we can assume we measured
 the same edge.
 Denote 
\begin_inset Formula $\alpha=\epsilon$
\end_inset

, the difference along the edge between the two measurements by 
\begin_inset Formula $c$
\end_inset

 and 
\begin_inset Formula $\theta$
\end_inset

 the angle of the first measurement 
\series bold
relative
\series default
 to the edge.
 We can calculate 
\begin_inset Formula $\theta$
\end_inset

 as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
c=\sqrt{d_{1}^{2}+d_{2}^{2}-2d_{1}d_{2}cos\alpha}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\theta=cos^{-1}\left(\frac{d_{1}^{2}+c^{2}-d_{2}^{2}}{2d_{1}c}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename img_discrete_angles/figure5.png
	scale 27

\end_inset


\end_layout

\begin_layout Standard
So given the angle between the measurement and the measured edge, we can
 use the same data structure as before, but this time with 
\series bold
relative 
\series default

\begin_inset Formula $\theta$
\end_inset

, and instead of considering all the possible angles, consider only the
 two angles which are most close to 
\begin_inset Formula $\theta$
\end_inset

 in our discrete angles representation.
 This increases the preprocessing to 
\begin_inset Formula $O(qn^{2}logqn)$
\end_inset

 time and 
\begin_inset Formula $O(qn^{2})$
\end_inset

 space (as the total number of intervals per 
\begin_inset Formula $\theta$
\end_inset

 can now be 
\begin_inset Formula $O(n^{2})$
\end_inset

) and reduces the query complexity to 
\begin_inset Formula $O(logn+L)$
\end_inset

, but 
\begin_inset Formula $L$
\end_inset

 is expected to be much smaller but can be 
\begin_inset Formula $O(n^{2})$
\end_inset

 in the worst case.
\end_layout

\begin_layout Subsubsection*
Second Measurement Variant - different edge 
\end_layout

\begin_layout Standard
After the robot performed a single measurement 
\begin_inset Formula $d_{1}$
\end_inset

, if we can't assume we will always measure the same edge by turning a small
 angle, we can guarantee a second measurement to a different edge by turning
 
\begin_inset Formula $180\text{°}$
\end_inset

, denoted 
\begin_inset Formula $d_{2}$
\end_inset

.
 Then we can use the definitions as described above, and calculate another
 field for each interval 
\begin_inset Formula $min_{\theta}(I_{i}^{e})=\underset{x\in I_{i}^{e}}{min}\,f_{e}(\theta,x)$
\end_inset

.
 The robot could have measured 
\begin_inset Formula $e$
\end_inset

 at angle 
\begin_inset Formula $\theta$
\end_inset

 a distance 
\begin_inset Formula $d_{1}$
\end_inset

 and a second measurement 
\begin_inset Formula $d_{2}$
\end_inset

 only if 
\begin_inset Formula $min_{\theta}(I_{i}^{e})\leq d_{1}+d_{2}\leq max_{\theta}(I_{i}^{e})$
\end_inset

.
 In preprocessing, we can build an interval tree (data structure of number
 intervals) of the intervals 
\begin_inset Formula $[min_{\theta}(I_{i}^{e}),max_{\theta}(I_{i}^{e})]$
\end_inset

 which we can build in 
\begin_inset Formula $O(qnlogqn)$
\end_inset

 time.
 Given a query 
\begin_inset Formula $(d_{1},d_{2})$
\end_inset

 we search in the interval tree the value 
\begin_inset Formula $d_{1}+d_{2}$
\end_inset

 which takes 
\begin_inset Formula $O(logn+logq+L)$
\end_inset

 where 
\begin_inset Formula $L$
\end_inset

 is the number of intervals that match the query.
 For each interval we find in the interval tree we will output a single
 point (or all the interval points, if the two edges are parallel).
\end_layout

\end_body
\end_document
